# -*- coding: utf-8 -*-
"""Sarcasm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JFKIYAUXttafA4vis2Z_zpCICYh1UUmQ
"""

from google.colab import drive
drive.mount('/content/drive/')

!mkdir Sarcasm
cd Sarcasm
#Install Pytorch
!pip install pytorch-pretrained-bert
!mkdir output
!mkdir cache
#Upload tools.py and convert_examples_to_features.py file on Colab
from google.colab import files
def getLocalFiles():
    _files = files.upload()
    if len(_files) >0:
       for k,v in _files.items():
         open(k,'wb').write(v)
getLocalFiles()

#Import Library
from tools import *
import convert_examples_to_features

import torch
import pickle
import os
import logging
from torch.utils.data import (DataLoader, RandomSampler, SequentialSampler,
                              TensorDataset)
from torch.nn import CrossEntropyLoss, MSELoss
from tqdm import tqdm_notebook, trange
from pytorch_pretrained_bert import BertTokenizer, BertModel, BertForMaskedLM, BertForSequenceClassification
from pytorch_pretrained_bert.optimization import BertAdam, WarmupLinearSchedule
from multiprocessing import Pool, cpu_count


# OPTIONAL: if you want to have more information on what's happening, activate the logger as follows
import logging
logging.basicConfig(level=logging.INFO)

#Check availability of GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# import training and test data
import pandas as pd
train=pd.read_csv('../Data/train-balanced/train-balanced.csv')
test=pd.read_csv('../Data/test-balanced/test-balanced.csv')

#Data Prepration for tarining and test data
train['Comment']=train['parent_comment']+' '+train['comment']
train['Comment'].head(5)

test['Comment']=test['parent_comment']+' '+test['comment']
test['Comment'].head(5)

print('{} words.'.format(len([word for sentence in train['parent_comment'] for word in str(sentence).split()])))
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

train['word_count'] = train['Comment'].apply(lambda x: len(str(x).split(" ")))
train[['Comment','word_count']].head()
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

test['word_count'] = test['Comment'].apply(lambda x: len(str(x).split(" ")))
test[['Comment','word_count']].head()
print('{} words.'.format(len([word for sentence in test['Comment'] for word in str(sentence).split()])))

#Lower Case
train['Comment'] = train['Comment'].apply(lambda x: " ".join(x.lower() for x in str(x).split()))
train['Comment'].head()

#Lower Case
test['Comment'] = test['Comment'].apply(lambda x: " ".join(x.lower() for x in str(x).split()))
test['Comment'].head()

#Removing Punctuation
train['Comment'] = train['Comment'].str.replace('[^\w\s]','')
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

#Removing Punctuation
test['Comment'] = test['Comment'].str.replace('[^\w\s]','')
print('{} words.'.format(len([word for sentence in test['Comment'] for word in str(sentence).split()])))

#Removal of Stop Words
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
stop = stopwords.words('english')
train['Comment'] = train['Comment'].apply(lambda x: " ".join(x for x in x.split() if x not in stop))
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

#Removal of Stop Words
test['Comment'] = test['Comment'].apply(lambda x: " ".join(x for x in x.split() if x not in stop))
print('{} words.'.format(len([word for sentence in test['Comment'] for word in str(sentence).split()])))

#Common word removal
freq = pd.Series(' '.join(train['Comment']).split()).value_counts()[:10]
freq = list(freq.index)
train['Comment'] = train['Comment'].apply(lambda x: " ".join(x for x in x.split() if x not in freq))
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

#Rare word Removal
freq = pd.Series(' '.join(train['Comment']).split()).value_counts()[-10:]
freq = list(freq.index)
train['Comment'] = train['Comment'].apply(lambda x: " ".join(x for x in x.split() if x not in freq))
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

#Lametization
import nltk
nltk.download('wordnet')
from textblob import Word
train['Comment'] = train['Comment'].apply(lambda x: " ".join([Word(word).lemmatize() for word in x.split()]))
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

#Removal of Number
train['Comment'] = train['Comment'].str.replace('\d+','')
print('{} words.'.format(len([word for sentence in train['Comment'] for word in str(sentence).split()])))

#Removal of Number
test['Comment'] = test['Comment'].str.replace('\d+','')
print('{} words.'.format(len([word for sentence in test['Comment'] for word in str(sentence).split()])))


# force train into cola format
train['dummy_1'] = range(0,len(train['Comment']))
train['dummy_2'] = '*'
train = train[['dummy_1','label','dummy_2','Comment']]
# force test into cola format
test['dummy_1'] = range(0,len(test['Comment']))
test['dummy_2'] = '*'

test=test[['dummy_1','label','dummy_2','Comment']]

# export as tab seperated

train.to_csv('train.tsv', sep='\t', index=False, header=False)
test.to_csv('test.tsv', sep='\t', index=False, header=True)

# The input data dir. Should contain the .tsv files (or other data files) for the task.
DATA_DIR = "./"
# Bert pre-trained model selected in the list: bert-base-uncased,
# bert-large-uncased, bert-base-cased, bert-large-cased, bert-base-multilingual-uncased,
# bert-base-multilingual-cased, bert-base-chinese.
BERT_MODEL = 'bert-base-cased'
# The name of the task to train.
TASK_NAME = 'Sarcasm'
# The output directory where the model predictions and checkpoints will be written.
OUTPUT_DIR = 'output/'
# The maximum total input sequence length after WordPiece tokenization.

# This is where BERT will look for pre-trained models to load parameters from.
CACHE_DIR = 'cache/'

# Sequences longer than this will be truncated, and sequences shorter than this will be padded.
MAX_SEQ_LENGTH = 128
TRAIN_BATCH_SIZE = 24
EVAL_BATCH_SIZE = 8
LEARNING_RATE = 2e-5
NUM_TRAIN_EPOCHS = 1
RANDOM_SEED = 42
GRADIENT_ACCUMULATION_STEPS = 1
WARMUP_PROPORTION = 0.1
OUTPUT_MODE = 'classification'
CONFIG_NAME = "bert_config.json"
WEIGHTS_NAME = "pytorch_model.bin"

output_mode = OUTPUT_MODE

#Load pre-trained model tokenizer (vocabulary)
tokenizer = BertTokenizer.from_pretrained('bert-base-cased', do_lower_case=False)

processor = BinaryClassificationProcessor()
train_examples = processor.get_train_examples(DATA_DIR)
train_examples_len = len(train_examples)

label_list = processor.get_labels() # [0, 1] for binary classification
num_labels = len(label_list)

num_train_optimization_steps = int(
    train_examples_len / TRAIN_BATCH_SIZE / GRADIENT_ACCUMULATION_STEPS) * NUM_TRAIN_EPOCHS

label_map = {label: i for i, label in enumerate(label_list)}
train_examples_for_processing = [(example, label_map, MAX_SEQ_LENGTH, tokenizer, output_mode) for example in train_examples]


process_count = cpu_count() - 1
if __name__ == '__main__':
    print(f'Preparing to convert {train_examples_len} examples..')
    print(f'Spawning {process_count} processes..')
    with Pool(process_count) as p:
        train_features = list(tqdm(p.imap(convert_examples_to_features.convert_example_to_feature, train_examples_for_processing), total=train_examples_len))
with open("train_features.pkl", 'wb') as f:
    pickle.dump(train_features, f)

# Load pre-trained model (weights)
model = BertForSequenceClassification.from_pretrained(BERT_MODEL, cache_dir=CACHE_DIR, num_labels=num_labels)

with open(DATA_DIR + "train_features.pkl", "rb") as f:
     train_features = pickle.load(f)

param_optimizer = list(model.named_parameters())
no_decay = ['bias', 'LayerNorm.bias', 'LayerNorm.weight']
optimizer_grouped_parameters = [
    {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},
    {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
    ]

optimizer = BertAdam(optimizer_grouped_parameters,
                     lr=LEARNING_RATE,
                     warmup=WARMUP_PROPORTION,
                     t_total=num_train_optimization_steps)

global_step = 0
nb_tr_steps = 0
tr_loss = 0

logger.info("***** Running training *****")
logger.info("  Num examples = %d", train_examples_len)
logger.info("  Batch size = %d", TRAIN_BATCH_SIZE)
logger.info("  Num steps = %d", num_train_optimization_steps)
all_input_ids = torch.tensor([f.input_ids for f in train_features], dtype=torch.long)
all_input_mask = torch.tensor([f.input_mask for f in train_features], dtype=torch.long)
all_segment_ids = torch.tensor([f.segment_ids for f in train_features], dtype=torch.long)

if OUTPUT_MODE == "classification":
    all_label_ids = torch.tensor([f.label_id for f in train_features], dtype=torch.long)
elif OUTPUT_MODE == "regression":
    all_label_ids = torch.tensor([f.label_id for f in train_features], dtype=torch.float)

train_data = TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)
train_sampler = RandomSampler(train_data)
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=TRAIN_BATCH_SIZE)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

model.train()
for _ in trange(int(NUM_TRAIN_EPOCHS), desc="Epoch"):
    tr_loss = 0
    nb_tr_examples, nb_tr_steps = 0, 0
    for step, batch in enumerate(tqdm_notebook(train_dataloader, desc="Iteration")):
        batch = tuple(t.to(device) for t in batch)
        input_ids, input_mask, segment_ids, label_ids = batch
        input_ids = input_ids.to(device)
        segment_ids = segment_ids.to(device)
        input_mask = input_mask.to(device)
        model=model.to(device)
        logits = model(input_ids, segment_ids, input_mask, labels=None)

        if OUTPUT_MODE == "classification":
            loss_fct = CrossEntropyLoss()
            loss = loss_fct(logits.view(-1, num_labels), label_ids.view(-1))
        elif OUTPUT_MODE == "regression":
            loss_fct = MSELoss()
            loss = loss_fct(logits.view(-1), label_ids.view(-1))

        if GRADIENT_ACCUMULATION_STEPS > 1:
            loss = loss / GRADIENT_ACCUMULATION_STEPS

        loss.backward()
        print("\r%f" % loss, end='')
        
        tr_loss += loss.item()
        nb_tr_examples += input_ids.size(0)
        nb_tr_steps += 1
        if (step + 1) % GRADIENT_ACCUMULATION_STEPS == 0:
            optimizer.step()
            optimizer.zero_grad()
            global_step += 1

model_to_save = model.module if hasattr(model, 'module') else model  # Only save the model it-self

# If we save using the predefined names, we can load using `from_pretrained`
output_model_file = os.path.join(OUTPUT_DIR, WEIGHTS_NAME)
output_config_file = os.path.join(OUTPUT_DIR, CONFIG_NAME)

torch.save(model_to_save.state_dict(), output_model_file)
model_to_save.config.to_json_file(output_config_file)
tokenizer.save_vocabulary(OUTPUT_DIR)

